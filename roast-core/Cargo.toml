[package]
name = "roast-core"
version.workspace = true
authors.workspace = true
edition.workspace = true
description = "Rust implementations of Robust Asynchronous Schnorr Threshold Signatures (ROAST)"
readme.workspace = true
repository.workspace = true
license.workspace = true
keywords = ["cryptography", "crypto", "schnorr", "threshold", "signature"]
categories.workspace = true

[dependencies]
document-features.workspace = true
frost-core.workspace = true
rand = { workspace = true, optional = true }
rand_core.workspace = true
thiserror-nostd-notrait.workspace = true
thiserror = { workspace = true, optional = true }
parity-scale-codec = { version = "3.6", features = ["derive"], default-features = false, optional = true }
scale-info = { version = "2.5", features = ["derive"], default-features = false, optional = true }

[features]
default = ["serialization", "cheater-detection", "std"]
#! ## Features
## Enable standard library support.
std = ["dep:thiserror"]
## Enable `serde` support for types that need to be communicated. You
## can use `serde` to serialize structs with any encoder that supports
## `serde` (e.g. JSON with `serde_json`).
serde = ["frost-core/serde"]
## Enable `parity-scale-codec` and `scale-info` support for types that need to be communicated.
codec = ["frost-core/codec", "dep:parity-scale-codec", "dep:scale-info"]
## Enable a default serialization format. Enables `serde` and `codec`.
serialization = ["frost-core/serialization", "serde", "codec"]
## Exposes ciphersuite-generic tests for other crates to use.
test-impl = ["dep:rand"]
## Enable cheater detection.
cheater-detection = ["frost-core/cheater-detection"]
